// Mocks generated by Mockito 5.3.2 from annotations
// in ricky_and_morty/test/apps/location/domain/usecases/get_single_location_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ricky_and_morty/apps/location/data/repositories/location_repository.dart'
    as _i3;
import 'package:ricky_and_morty/apps/location/domain/models/location.dart'
    as _i6;
import 'package:ricky_and_morty/common/exceptions/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepository extends _i1.Mock
    implements _i3.LocationRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Location>> getSingle(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [url],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Location>>.value(
            _FakeEither_0<_i5.Failure, _i6.Location>(
          this,
          Invocation.method(
            #getSingle,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Location>>.value(
                _FakeEither_0<_i5.Failure, _i6.Location>(
          this,
          Invocation.method(
            #getSingle,
            [url],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Location>>);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i6.Location {
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get dimension => (super.noSuchMethod(
        Invocation.getter(#dimension),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  List<String> get residents => (super.noSuchMethod(
        Invocation.getter(#residents),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  DateTime get created => (super.noSuchMethod(
        Invocation.getter(#created),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#created),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.getter(#created),
        ),
      ) as DateTime);
}
