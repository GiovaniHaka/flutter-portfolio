// Mocks generated by Mockito 5.3.2 from annotations
// in ricky_and_morty/test/apps/characters/domain/usecases/get_all_characters_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ricky_and_morty/apps/characters/data/repositories/characters_repository.dart'
    as _i4;
import 'package:ricky_and_morty/apps/characters/domain/models/character.dart'
    as _i9;
import 'package:ricky_and_morty/apps/characters/domain/models/character_filters.dart'
    as _i11;
import 'package:ricky_and_morty/apps/characters/domain/models/get_all_characters_response.dart'
    as _i7;
import 'package:ricky_and_morty/apps/characters/domain/models/request/all_request.dart'
    as _i8;
import 'package:ricky_and_morty/apps/characters/domain/models/request/multiple_request.dart'
    as _i10;
import 'package:ricky_and_morty/common/exceptions/failure.dart' as _i6;
import 'package:ricky_and_morty/common/models/rick_and_morty_api/info.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInfo_1 extends _i1.SmartFake implements _i3.Info {
  _FakeInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharactersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharactersRepository extends _i1.Mock
    implements _i4.CharactersRepository {
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.GetAllCharactersResponse>> getAll(
          _i8.AllRequest? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [req],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i7.GetAllCharactersResponse>>.value(
            _FakeEither_0<_i6.Failure, _i7.GetAllCharactersResponse>(
          this,
          Invocation.method(
            #getAll,
            [req],
          ),
        )),
        returnValueForMissingStub: _i5.Future<
                _i2.Either<_i6.Failure, _i7.GetAllCharactersResponse>>.value(
            _FakeEither_0<_i6.Failure, _i7.GetAllCharactersResponse>(
          this,
          Invocation.method(
            #getAll,
            [req],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.GetAllCharactersResponse>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i9.Character>>> getMultiple(
          _i10.MultipleRequest? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMultiple,
          [req],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i9.Character>>>.value(
                _FakeEither_0<_i6.Failure, List<_i9.Character>>(
          this,
          Invocation.method(
            #getMultiple,
            [req],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i9.Character>>>.value(
                _FakeEither_0<_i6.Failure, List<_i9.Character>>(
          this,
          Invocation.method(
            #getMultiple,
            [req],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i9.Character>>>);
}

/// A class which mocks [GetAllCharactersResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCharactersResponse extends _i1.Mock
    implements _i7.GetAllCharactersResponse {
  @override
  _i3.Info get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: _FakeInfo_1(
          this,
          Invocation.getter(#info),
        ),
        returnValueForMissingStub: _FakeInfo_1(
          this,
          Invocation.getter(#info),
        ),
      ) as _i3.Info);
  @override
  set info(_i3.Info? _info) => super.noSuchMethod(
        Invocation.setter(
          #info,
          _info,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i9.Character> get characters => (super.noSuchMethod(
        Invocation.getter(#characters),
        returnValue: <_i9.Character>[],
        returnValueForMissingStub: <_i9.Character>[],
      ) as List<_i9.Character>);
  @override
  set characters(List<_i9.Character>? _characters) => super.noSuchMethod(
        Invocation.setter(
          #characters,
          _characters,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AllRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockAllRequest extends _i1.Mock implements _i8.AllRequest {
  @override
  set filters(_i11.CharacterFilters? _filters) => super.noSuchMethod(
        Invocation.setter(
          #filters,
          _filters,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set url(String? _url) => super.noSuchMethod(
        Invocation.setter(
          #url,
          _url,
        ),
        returnValueForMissingStub: null,
      );
}
